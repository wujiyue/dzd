package [servicePackage];

import [beanPackage].[modelClass][beanNameSuffix];
import [repoPackage].[modelClass][daoNameSuffix];
import org.springframework.stereotype.Service;
import com.markbro.asoiaf.core.service.CrudService;
import org.springframework.transaction.annotation.Transactional;
import java.util.HashMap;
import com.markbro.asoiaf.core.model.Msg;
import java.util.List;
import java.util.ArrayList;
import com.markbro.dzd.common.util.MyBatisRequestUtil;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import com.github.miemiedev.mybatis.paginator.domain.PageBounds;
[TableKeyImport]
/**
 * [beanChineseName] Service
 * Created by [author] on [date].
 */
@Service
public class [modelClass][serviceNameSuffix]{

    @Autowired
    private [modelClass][daoNameSuffix] [lowerModelClass][daoNameSuffix];
    @Autowired
    private TableKeyService [keyService];
     /*基础公共方法*/
    public [modelClass][beanNameSuffix] get([PK] id){
        return [lowerModelClass][daoNameSuffix].get(id);
    }
    public Map<String,Object> getMap([PK] id){
        return [lowerModelClass][daoNameSuffix].getMap(id);
    }
    public List<[modelClass][beanNameSuffix]> find(PageBounds pageBounds,Map<String,Object> map){
        return [lowerModelClass][daoNameSuffix].find(pageBounds,map);
    }
    public List<[modelClass][beanNameSuffix]> findByMap(PageBounds pageBounds,Map<String,Object> map){
        return [lowerModelClass][daoNameSuffix].findByMap(pageBounds,map);
    }

    public void add([modelClass][beanNameSuffix] [lowerModelClass][beanNameSuffix]){
        [lowerModelClass][daoNameSuffix].add([lowerModelClass][beanNameSuffix]);
    }
    public Object save([modelClass][beanNameSuffix] [lowerModelClass][beanNameSuffix]){

          Msg msg=new Msg();
                 try{
                     if([lowerModelClass][beanNameSuffix].getId()==null||"".equals([lowerModelClass][beanNameSuffix].getId().toString())){
                         [PK] id= [PKGenerator];
[parentidsForSave]
[sortForSave]
                         [lowerModelClass][beanNameSuffix].setId(id);
                         [lowerModelClass][daoNameSuffix].add([lowerModelClass][beanNameSuffix]);
                     }else{
[parentidsForUpdate]
                         [lowerModelClass][daoNameSuffix].update([lowerModelClass][beanNameSuffix]);
                     }
                     msg.setType(Msg.MsgType.success);
                     msg.setContent("保存信息成功");
                 }catch (Exception ex){
                     msg.setType(Msg.MsgType.error);
                     msg.setContent("保存信息失败");
                 }
                return msg;

    }
    public void addBatch(List<[modelClass][beanNameSuffix]> [lowerModelClass][beanNameSuffix]s){
        [lowerModelClass][daoNameSuffix].addBatch([lowerModelClass][beanNameSuffix]s);
    }

    public void update([modelClass][beanNameSuffix] [lowerModelClass][beanNameSuffix]){
        [lowerModelClass][daoNameSuffix].update([lowerModelClass][beanNameSuffix]);
    }

    public void updateByMap(Map<String,Object> map){
        [lowerModelClass][daoNameSuffix].updateByMap(map);
    }
    public void updateByMapBatch(Map<String,Object> map){
        [lowerModelClass][daoNameSuffix].updateByMapBatch(map);
    }
    public void delete([PK] id){
        [lowerModelClass][daoNameSuffix].delete(id);
    }

    public void deleteBatch([PK][] ids){
        [lowerModelClass][daoNameSuffix].deleteBatch(ids);
    }
[parentid]
[sort]
[ztree]
     /*自定义方法*/
[findByService]
}
