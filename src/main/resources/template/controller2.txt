package ${webPackage};

import ${beanPackage}.${modelClass}${beanNameSuffix};
import ${servicePackage}.${modelClass}${serviceNameSuffix};
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.apache.ibatis.annotations.Param;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import com.markbro.asoiaf.utils.string.StringUtil;
import org.springframework.ui.Model;
import com.markbro.asoiaf.core.model.Msg;
import com.markbro.asoiaf.core.model.PageParam;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
${ImportIdGenerator}
/**
 * ${beanChineseName}管理
 * Created by ${author} on ${date}.
 */

@Controller
@RequestMapping("/${module}/${lowerModelClass}")
public class ${modelClass}Controller extends com.markbro.asoiaf.core.web.BaseController{
    @Autowired
    protected ${modelClass}${serviceNameSuffix} ${lowerModelClass}${serviceNameSuffix};

    @RequestMapping(value={"","/"})
    public String index(){
        return "/${module}/${lowerModelClass}/list";
    }
    /**
     * 跳转到新增页面
     */
    @RequestMapping("/add")
    public String toAdd(${modelClass}${beanNameSuffix} ${lowerModelClass},Model model){
        return "/${module}/${lowerModelClass}/add";
    }
    /**
     * 删除数据并重定向到列表页面
     */
     @RequestMapping ("/delete/{id}")
     public String delete (@PathVariable ${PK} id, RedirectAttributes redirectAttributes) {

            if (false){//判断不能删除的条件
                redirectAttributes.addFlashAttribute("msg", new Msg(Msg.MsgType.error, "不能删除当前数据!"));
            }else {
                try {
                    ${lowerModelClass}${serviceNameSuffix}.delete(id);
                    redirectAttributes.addFlashAttribute("msg", new Msg(Msg.MsgType.success, "删除成功!"));
                } catch (Exception e) {
                    logger.error("删除失败!", e);
                    redirectAttributes.addFlashAttribute("msg", new Msg(Msg.MsgType.error, "删除失败!"));
                }
            }
            return "redirect:/${module}/${lowerModelClass}/list";
        }
   /**
    * 跳转到编辑页面
    */
    @RequestMapping(value = "/edit")
    public String toEdit(${modelClass}${beanNameSuffix} ${lowerModelClass},Model model){
        if(${lowerModelClass}!=null&&${lowerModelClass}.getId()!=null){
            ${lowerModelClass}=${lowerModelClass}${serviceNameSuffix}.get(${lowerModelClass}.getId());
        }
         model.addAttribute("${lowerModelClass}",${lowerModelClass});
         return "/${module}/${lowerModelClass}/edit";
    }
    //-----------json数据接口--------------------
    ${findByAction}
    ${findDeletedAction}
    ${findBackAction}
    ${findUnAvailableAction}

    /**
     * 根据主键获得数据
     */
    @ResponseBody
    @RequestMapping(value = "/json/get/{id}")
    public Object get(@PathVariable ${PK} id) {
        return ${lowerModelClass}${serviceNameSuffix}.get(id);
    }
    /**
     * 获得分页json数据
     */
    @ResponseBody
    @RequestMapping("/json/find")
    public Object find() {
        resultMap=getPageMap(${lowerModelClass}${serviceNameSuffix}.find(getPageBounds(),getMap(request)));
        return resultMap;
    }
    /**
     * 不分页查询数据
     */
    @ResponseBody
    @RequestMapping("/json/findAll")
    public Object findAll() {
        Map map=getMap(request);
        String sortString=String.valueOf(map.get("sortString"));
        PageBounds pageBounds=null;
        if(StringUtil.notEmpty(sortString)){
             pageBounds=new PageBounds(Order.formString(sortString));
        }else{
             pageBounds=new PageBounds();
        }
        resultMap=getPageMap(${lowerModelClass}${serviceNameSuffix}.find(pageBounds,map));
        return resultMap;
    }

    @ResponseBody
    @RequestMapping(value="/json/add",method = RequestMethod.POST)
    public void add(${modelClass}${beanNameSuffix} m) {
        ${IdGenerator}
        ${lowerModelClass}${serviceNameSuffix}.add(m);
    }


    @ResponseBody
    @RequestMapping(value="/json/update",method = RequestMethod.POST)
    public void update(${modelClass}${beanNameSuffix} m) {
        ${lowerModelClass}${serviceNameSuffix}.update(m);
    }


    @ResponseBody
    @RequestMapping(value="/json/save",method = RequestMethod.POST)
    public void save(${modelClass}${beanNameSuffix} m) {
           return ${lowerModelClass}${serviceNameSuffix}.save(m);
    }

    ${removeAction}
    ${removeBatchAction}


    @ResponseBody
    @RequestMapping(value = "/json/delete/{id}", method = RequestMethod.POST)
    public Object delete(@PathVariable ${PK} id) {
    	Msg msg=new Msg();
    	try{
    	    ${parentidForDelete}
            ${lowerModelClass}${serviceNameSuffix}.delete(id);
            msg.setType(Msg.MsgType.success);
            msg.setContent("删除成功！");
        }catch (Exception e){
        		msg.setType(Msg.MsgType.error);
        		msg.setContent("删除失败！");
        }
        return msg;
    }


    @ResponseBody
    @RequestMapping(value = "/json/deletes/{ids}", method = RequestMethod.POST)
    public Object deletes(@PathVariable ${PK}[] ids) {//前端传送一个用逗号隔开的id字符串，后端用数组接收，springMVC就可以完成自动转换成数组
        Msg msg=new Msg();
    	try{
    	     ${parentidForDeletes}
             ${lowerModelClass}${serviceNameSuffix}.deleteBatch(ids);
             msg.setType(Msg.MsgType.success);
             msg.setContent("删除成功！");
         }catch (Exception e){
         	 msg.setType(Msg.MsgType.error);
         	 msg.setContent("删除失败！");
         }
         return msg;
    }

    ${parentid}
    ${sort}
    ${ztree}
}
